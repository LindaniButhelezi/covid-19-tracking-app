{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","app.js","index.js","app.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","colour","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","pointRadius","options","scales","xAxes","ticks","fontSize","scaleLabel","display","labelString","barChart","legend","title","text","yAxes","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImg","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3668ba75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2ZxBV\",\"card\":\"Cards_card__Pt3yn\",\"infected\":\"Cards_infected__3MVHn\",\"recovered\":\"Cards_recovered__2opaq\",\"deaths\":\"Cards_deaths__279cS\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid, StylesProvider} from '@material-ui/core';\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\n\r\nconst Cards=({data:{confirmed, recovered, deaths, lastUpdate}})=>{\r\n    if(!confirmed){\r\n        return 'Loading';\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"centre\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography colour=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography colour=\"textSecondary\">{new Date(lastUpdate).toDateString()} </Typography>\r\n                        <Typography variant=\"body2\">Number of Active Cases of COVID-19</Typography>\r\n                        \r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography colour=\"textSecondary\" gutterBottom>Recovered\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography colour=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography colour=\"textSecondary\" gutterBottom>Deaths\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography colour=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths from COVID-19</Typography>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios' // Used to make api requests\r\nconst url='https://covid19.mathdro.id/api';\r\nconst url2='https://covid19.mathdro.id/api/daily';\r\nconst url3='https://covid19.mathdro.id/api/countries';\r\n\r\nexport const fetchData= async(country) => {\r\n    let changeableUrl=url\r\n\r\n    if (country==='global'){changeableUrl=url}else if(country){changeableUrl=url+'/countries/'+country}\r\n\r\n    /*if(country){\r\n        changeableUrl=url+'/countries/'+country\r\n        console.log(changeableUrl);\r\n    }*/\r\n\r\n    try{\r\n        const {data:{confirmed, recovered, deaths, lastUpdate}}= await axios.get(changeableUrl);\r\n        //Console.log(response);\r\n        return {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate,\r\n        };\r\n        \r\n\r\n    } catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData=async()=> {\r\n    try {\r\n        const {data} = await axios.get(url2);\r\n        \r\n        const modifiedData=data.map((dailyData)=>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n        \r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries= async()=> {\r\n    try{\r\n        const {data: {countries}}=await axios.get(url3)\r\n        return countries.map((country)=>country.name)\r\n\r\n    }catch (error){\r\n\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart=({data:{confirmed, recovered, deaths}, country})=>{\r\n    const [dailyData, setDailyData]=useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI=async ()=>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        \r\n\r\n        fetchAPI();\r\n\r\n    },[]);\r\n\r\n    \r\n\r\n    const lineChart=(\r\n        dailyData.length?\r\n        (<Line data={{\r\n            labels: dailyData.map(({date})=>date),\r\n            datasets: [{\r\n                data: dailyData.map(({confirmed})=>confirmed/1000000),\r\n                label: 'Infected', \r\n                borderColor: 'blue',\r\n                backgroundColor: 'rgba(0,0,255, 0.2)',\r\n                fill: true,\r\n                pointRadius: 0,\r\n                \r\n            },\r\n            {\r\n                data: dailyData.map(({deaths})=>deaths/1000000),\r\n                label: 'Deaths', \r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255,0,0, 0.2)',\r\n                fill: true, \r\n                pointRadius: 0,                          \r\n            }]\r\n        }} \r\n\r\n        options={{  \r\n                              \r\n            scales:{\r\n                xAxes:[\r\n                    {\r\n                        ticks:{\r\n                            fontSize:9\r\n                        }\r\n                    }\r\n                ],\r\n\r\n                xAxes:[\r\n                    {\r\n                        ticks:{\r\n                            fontSize:9\r\n                        }\r\n                    }\r\n                ],\r\n\r\n                yAxes:[\r\n                    {\r\n                        ticks:{\r\n                            fontSize:9\r\n                        },\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'No. of Millions of People',\r\n                            fontSize: 9,\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }}\r\n\r\n\r\n        />) :null\r\n    );\r\n\r\n    const barChart=(\r\n        \r\n        confirmed\r\n        ?(\r\n            <Bar\r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{label: 'People',\r\n                    backgroundColor: [\r\n                        'rgba(0,0,255, 0.6)',\r\n                        'rgba(0,255,0, 0.6)',\r\n                        'rgba(255,0,0, 0.6)'],\r\n\r\n                    data: [confirmed.value, recovered.value, deaths.value]\r\n                }]\r\n\r\n\r\n            }}\r\n\r\n            options={{\r\n                legend: {display: false},\r\n                title: {display: true,text: 'Current stats in '+country},\r\n                \r\n                scales:{\r\n                    xAxes:[\r\n                        {\r\n                            ticks:{\r\n                                fontSize:9\r\n                            }\r\n                        }\r\n                    ],\r\n\r\n                    yAxes:[\r\n                        {\r\n                            ticks:{\r\n                                fontSize:9\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'No. of People',\r\n                                fontSize: 9,\r\n                                \r\n                            }\r\n                        }\r\n                    ]\r\n\r\n\r\n                }\r\n            }}\r\n            />\r\n\r\n        ): null\r\n    )\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country? barChart: lineChart}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from '../../api';\r\n\r\n\r\n\r\nconst CountryPicker=({handleCountryChange})=>{\r\n    const [fetchedCountries, setFetchedCountries]=useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI=async ()=>{\r\n          setFetchedCountries(await fetchCountries())  \r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries])\r\n\r\n\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i)=><option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker","\r\nimport React from 'react';\r\n//This is a long way of importing files\r\n/*\r\nimport Cards from './components/Cards/Cards'\r\nimport Chart from './components/Chart/Chart'\r\nimport CountryPicker from './components/CountryPicker/CountryPicker'\r\n*/\r\n\r\nimport {Cards, Chart, CountryPicker,} from './components' \r\nimport styles from './app.module.css';\r\nimport {fetchData} from './api'\r\nimport coronaImg from './images/image.png'\r\n\r\nclass App extends React.Component {\r\n\r\n    state={\r\n        data:{},\r\n        country:'',\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData= await fetchData();\r\n        \r\n        this.setState({data: fetchedData});\r\n    }\r\n\r\n    handleCountryChange=async(country)=>{\r\n        const fetchedData=await fetchData(country)\r\n        this.setState({data: fetchedData, country: country})\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const {data, country}=this.state;\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImg} alt=\"COVID-19\"/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n                \r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__3wZbD\",\"image\":\"app_image__2r6ww\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__jLLe2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__HkP4N\"};","module.exports = __webpack_public_path__ + \"static/media/image.85fa7dd6.png\";"],"sourceRoot":""}